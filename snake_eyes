#!/usr/bin/env python3

'''This script provides a DnD dice rolling discord bot.'''

import os
import json
import requests
import textwrap
import random
import discord
from discord.ext import commands

CLIENT = discord.Client()
TOKEN = os.environ['SNAKE_EYES_TOKEN']
BOT = commands.Bot(command_prefix='!')


def simulate_roll(dice):
    '''Takes in list of dice and returns list containing the rolls.'''
    random.seed()
    values = []
    for die in dice:
        values.append(random.randint(1, die))
    return values


def generate_message(faces, values, percentile):
    '''Takes in the die and the roll value to generate messages.'''
    output = ''
    for i, value in enumerate(values):
        if faces == 20:
            # add pithy comments for critical success and failure
            if value == 20:
                output += '**Critical success!** A natural **20**!\n'
            elif value == 1:
                output += '**Critical failure!** You rolled a **1**!\n'
            else:
                output += f'You rolled a... **{value}**\n'
        else:
            if i == 0:
                output += f'You rolled a... '
            elif i == len(values) - 1:
                output += f', and a '
            else:
                output += f', '

            if percentile:
                output += f'**{value*10}%**'
            else:
                output += f'**{value}**'

    return output


def format_search(name):
    '''Transforms user input into case-sensitive search format.'''
    tokens = name.split()
    search = ''
    for num, token in enumerate(tokens):
        if num > 0:
            search += '+'
        if token != 'of':
            search += token.capitalize()
    return search


def get_info_url(name, resource):
    '''Fetch info by searching `name` thru dnd5eapi.co.'''
    base_url = 'http://dnd5eapi.co/api/' + resource + '/?name=' \
        + format_search(name)
    page = requests.get(base_url)
    if page.status_code == 200:
        data = json.loads(page.text)
        if data['results']:
            return data['results'][0]['url']
    return ''


def get_spell(name):
    '''Return info about a given spell.'''
    url = get_info_url(name, 'spells')
    output = 'The spell you entered was not found.'
    if url:
        page = requests.get(url)
        data = json.loads(page.text)

        # TODO: Add materials variable.
        spell_name = data['name']
        level = data['level']
        rng = data['range']
        duration = data['duration']
        con = data['concentration']
        desc = data['desc'][0]
        try:
            alt = data['higher_level'][0]
        except KeyError:
            alt = ''
        # classes = data['classes']

        # TODO: Add a for loop to print classes.
        output = f'''\
        **{spell_name}**
        *Duration: {duration}, Range: {rng}, Concentration: {con}
        Level: {level}*
        ---
        {desc}
        {alt}
        '''

    return textwrap.dedent(output)


@BOT.command()
async def roll(ctx, *args):
    '''Main function for bot.'''
    amount = 0
    faces = 0
    percentile = False

    if args[0][0] == 'd':
        # if only 1 die is being rolled (ex. !roll d10).
        amount = 1
        faces = int(args[0][1:])
    else:
        # ex. !roll 3d10.
        amount = int(args[0][0])
        faces = int(args[0][2:])

    if faces == 0:
        faces = 10
        percentile = True

    if faces > 20:
        await ctx.send('Please make sure your number is between d1-20.')
    else:
        dice = []
        for _ in range(amount):
            dice.append(faces)
        values = simulate_roll(dice)
        message = generate_message(faces, values, percentile)
        await ctx.send(message)


@BOT.command()
async def spell(ctx, *args):
    '''Look up spell.'''
    message = get_spell(' '.join(args))
    await ctx.send(message.replace('â€™', '\''))

if __name__ == '__main__':
    BOT.run(TOKEN)
